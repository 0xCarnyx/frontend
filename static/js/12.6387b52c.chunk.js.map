{"version":3,"sources":["src/components/InsufficientBalanceButton.tsx","src/components/AmountMeta.tsx","src/components/ApproveButton.tsx","src/hooks/useDelayedOnBlockEffect.tsx","src/components/Notice.tsx","src/components/LPTokenSelect.tsx","src/hooks/useLPTokensState.tsx","src/hooks/useMasterChef.tsx","src/hooks/useFarmingState.tsx","src/screens/FarmingScreen.tsx"],"names":["InsufficientBalanceButton","symbol","t","useTranslation","title","disabled","AmountMeta","props","useColors","textDark","textLight","placeholder","style","fontSize","IS_DESKTOP","marginBottom","Spacing","normal","color","amount","suffix","ApproveButton","approveToken","useContext","EthersContext","useState","loading","setLoading","onPress","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","containerStyle","tiny","useDelayedOnBlockEffect","effect","getEventName","inputs","initialTimeout","addOnBlockListener","removeOnBlockListener","eventName","useAsyncEffect","setTimeout","handles","forEach","handle","clearTimeout","Notice","borderStyle","border","useStyles","clear","note","text","buttonText","onPressButton","type","size","fontWeight","titleStyle","buttonStyle","paddingHorizontal","paddingVertical","alignSelf","marginTop","LPTokenList","state","emptyText","Item","renderItem","item","key","selected","onSelectToken","setSelectedLPToken","data","lpTokens","sort","p1","p2","m1","multiplier","m2","apy","length","EmptyList","keyExtractor","margin","textAlign","width","LPTokenItem","textMedium","balance","formatBalance","decimals","ITEM_SEPARATOR_HEIGHT","alignItems","tokenA","small","replaceWETH","tokenB","marginLeft","medium","caption","flex","light","LPTokenSelect","expanded","selectedLPToken","onExpand","updatingLPTokens","useLPTokensState","mode","useTokenPairState","provider","tokens","lastTimeRefreshed","setLastTimeRefreshed","setLPTokens","selectedLPTokenAllowed","setSelectedLPTokenAllowed","pair","setPair","setAmount","getPair","useSDK","updateLPTokens","fetchMyPools","fetchPools","fetchMyLPTokens","useEffect","undefined","block","fromToken","toToken","updateLastTimeRefreshed","Date","now","useMasterChef","deposit","lpTokenId","signer","masterChef","getContract","MASTER_CHEF","estimateGas","gasLimit","mul","div","logTransaction","toString","withdraw","useFarmingState","myPools","getTokenAllowance","depositing","setDepositing","withdrawing","setWithdrawing","setFromAmount","setToAmount","minAllowance","ethers","BigNumber","from","pow","sub","allowance","gte","totalSupply","amountDeposited","lpToken","convertToken","TokenAmount","lpTokenAmount","tokenAAmount","involvesToken","getLiquidityValue","toFixed","tokenBAmount","onDeposit","id","parseBalance","onWithdraw","Farming","chainId","large","TokenItem","Deposit","DepositInfo","marginRight","formatPercentage","isZero","AddLiquidityNotice","onAmountChanged","autoFocus","green","useLinker","isEmptyValue","sushiRewardedPerYear","sushiPerYear","pow10","label","formatUSD","totalValueUSD","DepositControls","error","setError","approveRequired","DepositButton","gt","message","code","catch","FarmingScreen","Platform","OS"],"mappings":"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","file":"static/js/12.6387b52c.chunk.js","sourcesContent":["import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    const t = useTranslation();\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const t = useTranslation();\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={t(\"approve-\", { symbol: props.token?.symbol || \"\" })}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import { useContext } from \"react\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext, OnBlockListener } from \"../context/EthersContext\";\n\nconst useDelayedOnBlockEffect = (\n    effect: OnBlockListener,\n    getEventName: () => string,\n    inputs?: any[],\n    initialTimeout = 500\n) => {\n    const { addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const eventName = getEventName();\n    useAsyncEffect<number[]>(\n        () => {\n            return [\n                setTimeout(effect, initialTimeout),\n                setTimeout(() => addOnBlockListener(eventName, effect), initialTimeout)\n            ];\n        },\n        handles => {\n            if (handles) {\n                handles.forEach(handle => clearTimeout(handle));\n                removeOnBlockListener(eventName);\n            }\n        },\n        inputs\n    );\n};\n\nexport default useDelayedOnBlockEffect;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance } from \"../utils\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n    disabled?: boolean;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <props.Item\n                    token={props.state.selectedLPToken}\n                    selected={true}\n                    onSelectToken={props.disabled ? () => {} : onUnselectToken}\n                />\n            )}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return <Item key={item.symbol} token={item} selected={false} onSelectToken={state.setSelectedLPToken} />;\n        },\n        [state.setSelectedLPToken]\n    );\n    const data = state.lpTokens.sort((p1, p2) => {\n        const m1 = p1.multiplier || 0;\n        const m2 = p2.multiplier || 0;\n        return m1 === m2 ? (p2.apy || 0) - (p1.apy || 0) : m2 - m1;\n    });\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => item.symbol} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 6);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyPools, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LPTokensState extends TokenPairState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    pair?: Pair;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\nlet updatingLPTokens = false;\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useTokenPairState();\n    const { provider, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [amount, setAmount] = useState(\"\");\n    const { getPair } = useSDK();\n\n    const updateLPTokens = async () => {\n        if (address && provider && tokens.length > 0 && !updatingLPTokens) {\n            try {\n                updatingLPTokens = true;\n                const data = await (mode === \"my-pools\"\n                    ? fetchMyPools(address, tokens, provider)\n                    : mode === \"pools\"\n                    ? fetchPools(address, tokens, provider)\n                    : fetchMyLPTokens(address, tokens, provider));\n                if (data) {\n                    setLPTokens(data);\n                }\n            } finally {\n                updatingLPTokens = false;\n                setLoading(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        setLoading(true);\n        setPair(undefined);\n        if (selectedLPToken && provider) {\n            try {\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\n            } catch (e) {\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setLoading(false);\n        }\n    }, [selectedLPToken, provider]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\n        toToken: state.toToken || selectedLPToken?.tokenB,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        pair,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import { useCallback } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nconst useMasterChef = () => {\n    const deposit = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\n        const tx = await masterChef.deposit(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.deposit()\", lpTokenId, amount.toString());\n    }, []);\n\n    const withdraw = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\n        const tx = await masterChef.withdraw(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.withdraw()\", lpTokenId, amount.toString());\n    }, []);\n\n    return {\n        deposit,\n        withdraw\n    };\n};\n\nexport default useMasterChef;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { TokenAmount } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { convertToken, parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useMasterChef from \"./useMasterChef\";\n\nexport interface FarmingState extends LPTokensState {\n    onDeposit: () => Promise<void>;\n    depositing: boolean;\n    onWithdraw: () => Promise<void>;\n    withdrawing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useFarmingState: (myPools: boolean) => FarmingState = myPools => {\n    const state = useLPTokensState(myPools ? \"my-pools\" : \"pools\");\n    const { signer, getTokenAllowance } = useContext(EthersContext);\n    const { deposit, withdraw } = useMasterChef();\n    const [loading, setLoading] = useState(false);\n    const [depositing, setDepositing] = useState(false);\n    const [withdrawing, setWithdrawing] = useState(false);\n\n    useEffect(() => {\n        setLoading(false);\n        setDepositing(false);\n        setWithdrawing(false);\n        state.setFromAmount(\"\");\n        state.setToAmount(\"\");\n    }, [state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useAsyncEffect(() => {\n        if (\n            state.pair &&\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.selectedLPToken.amountDeposited\n        ) {\n            const lpToken = convertToken(state.selectedLPToken);\n            const tokenA = convertToken(state.selectedLPToken.tokenA);\n            const tokenB = convertToken(state.selectedLPToken.tokenB);\n            const totalSupply = new TokenAmount(lpToken, state.selectedLPToken.totalSupply.toString());\n            const lpTokenAmount = new TokenAmount(lpToken, state.selectedLPToken.amountDeposited.toString());\n            const tokenAAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenA, totalSupply, lpTokenAmount)\n                : null;\n            state.setFromAmount(tokenAAmount?.toFixed() || \"\");\n            const tokenBAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenB, totalSupply, lpTokenAmount)\n                : null;\n            state.setToAmount(tokenBAmount?.toFixed() || \"\");\n        }\n    }, [state.pair, state.selectedLPToken]);\n\n    const onDeposit = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setDepositing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await deposit(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setDepositing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    const onWithdraw = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setWithdrawing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await withdraw(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onDeposit,\n        depositing,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nexport default useFarmingState;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Selectable from \"../components/Selectable\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { FarmingSubMenu } from \"../components/web/WebSubMenu\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useFarmingState, { FarmingState } from \"../hooks/useFarmingState\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, formatPercentage, formatUSD, isEmptyValue, parseBalance, pow10 } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst FarmingScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"plant-lp-tokens\")} />\n                    <Text light={true}>{t(\"plant-lp-tokens-desc\")}</Text>\n                    <Farming />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <FarmingSubMenu />\n        </Screen>\n    );\n};\n\nconst Farming = () => {\n    const { chainId } = useContext(EthersContext);\n    const t = useTranslation();\n    const state = useFarmingState(false);\n    if (chainId !== 1) return <ChangeNetwork />;\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect\n                state={state}\n                title={t(\"active-farms\")}\n                emptyText={t(\"unable-to-load-farms\")}\n                Item={TokenItem}\n            />\n            <Border />\n            <Deposit state={state} />\n            <DepositInfo state={state} />\n            <Notice text={t(\"sushi-vested-notice\")} clear={true} style={{ marginTop: Spacing.normal }} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const apy = props.token.apy || 0;\n    const multiplier = props.token.multiplier || 0;\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, alignItems: \"flex-end\", marginRight: 4 }}>\n                    <Text note={true}>\n                        {multiplier > 1 ? \"✨\" : \"\"}\n                        {multiplier.toFixed(2) || \"1.00\"}x APY\n                    </Text>\n                    <Text caption={IS_DESKTOP} medium={true}>\n                        {formatPercentage(apy)}%\n                    </Text>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nconst Deposit = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    if (!state.selectedLPToken) {\n        return <Heading text={t(\"amount\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={state.selectedLPToken.symbol + \" \" + t(\"amount\")} />\n            {state.selectedLPToken.balance.isZero() ? (\n                <AddLiquidityNotice state={state} />\n            ) : (\n                <TokenInput\n                    token={state.selectedLPToken}\n                    amount={state.amount}\n                    onAmountChanged={state.setAmount}\n                    autoFocus={IS_DESKTOP}\n                />\n            )}\n        </View>\n    );\n};\n\nconst AddLiquidityNotice = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    const { green } = useColors();\n    const onPress = useLinker(\"/liquidity\", \"Liquidity\");\n    return (\n        <>\n            <Notice\n                color={green}\n                text={t(\"tokens-needed-for-farming-notice\", { symbol: state.selectedLPToken!.symbol })}\n            />\n            <Button\n                color={green}\n                title={t(\"add-liquidity\")}\n                containerStyle={{ marginTop: Spacing.normal }}\n                onPress={onPress}\n            />\n        </>\n    );\n};\n\nconst DepositInfo = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    const disabled = isEmptyValue(state.amount) || !state.selectedLPToken?.sushiRewardedPerYear;\n    const sushiPerYear = disabled\n        ? 0\n        : parseBalance(state.amount)\n              .mul(state.selectedLPToken!.sushiRewardedPerYear!)\n              .div(pow10(18));\n    return (\n        <InfoBox>\n            <AmountMeta amount={formatBalance(sushiPerYear, 18, 8)} suffix={t(\"sushi-per-year\")} disabled={disabled} />\n            <Meta\n                label={t(\"my-balance\")}\n                text={formatBalance(state.selectedLPToken?.balance || 0)}\n                disabled={!state.selectedLPToken}\n            />\n            <Meta\n                label={t(\"total-value-locked\")}\n                text={formatUSD(state.selectedLPToken?.totalValueUSD || 0)}\n                disabled={!state.selectedLPToken}\n            />\n            <Meta\n                label={t(\"annual-percentage-yield\")}\n                text={formatPercentage(state.selectedLPToken?.apy || 0)}\n                suffix={\"%\"}\n                disabled={!state.selectedLPToken}\n            />\n            <DepositControls state={state} />\n        </InfoBox>\n    );\n};\n\nconst DepositControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || state.selectedLPToken.balance.isZero() ? (\n                <DepositButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken!}\n                        spender={MASTER_CHEF}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={isEmptyValue(state.amount) || !approveRequired}\n                    />\n                    <DepositButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst DepositButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = useCallback(() => {\n        onError({});\n        state.onDeposit().catch(onError);\n    }, [state.onDeposit, onError]);\n    return <Button title={t(\"deposit\")} disabled={disabled} loading={state.depositing} onPress={onPress} />;\n};\n\nexport default FarmingScreen;\n"],"sourceRoot":""}
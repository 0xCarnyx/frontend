{"version":3,"sources":["src/components/Heading.tsx","src/components/AmountMeta.tsx","src/components/Border.tsx","src/components/InsufficientBalanceButton.tsx","src/components/ApproveButton.tsx","src/components/ChangeNetwork.tsx","src/components/ErrorMessage.tsx","src/components/FetchingButton.tsx","src/components/InfoBox.tsx","src/components/TokenInput.tsx","src/components/Notice.tsx","src/components/Meta.tsx","src/components/Input.tsx","src/hooks/useSushiBar.tsx","src/hooks/useStakingState.tsx","src/screens/StakeScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","AmountMeta","t","useTranslation","textDark","textLight","placeholder","normal","amount","suffix","Border","border","width","backgroundColor","marginTop","InsufficientBalanceButton","symbol","ApproveButton","approveToken","useContext","EthersContext","useState","loading","setLoading","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","containerStyle","ChangeNetwork","chainId","networkName","1","42","justifyContent","light","textAlign","marginVertical","large","ErrorMessage","error","borderColor","borderWidth","padding","code","note","message","FetchingButton","InfoBox","darkMode","GlobalContext","backgroundLight","borderDark","useStyles","MaxButton","onPressMax","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","Platform","OS","maxButtonText","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","label","value","keyboardType","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","paddingTop","hideMaxButton","Notice","borderStyle","clear","titleStyle","paddingVertical","alignSelf","Meta","textMedium","red","useLinker","url","undefined","danger","textDecorationLine","Input","errors","forbidden","forEach","validation","match","regexp","push","allowed","join","minHeight","outline","placeholderTextColor","errorStyle","useSushiBar","enter","signer","sushiBar","getContract","SUSHI_BAR","estimateGas","gasLimit","mul","div","logTransaction","toString","leave","useStakingState","getTokenAllowance","tokens","updateTokens","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","setAmount","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","entering","setEntering","leaving","setLeaving","sushi","useMemo","find","xSushi","useEffect","useAsyncEffect","minAllowance","BigNumber","from","pow","sushiAllowance","gte","xSushiAllowance","sushiContract","balanceOf","totalSupply","xSushiContract","onEnter","parsed","onLeave","Staking","state","SushiBalance","AmountInput","isZero","StakeInfo","isEmptyValue","xSushiAmount","xSushiTotal","xSushiBalance","add","share","Fraction","Controls","setError","StakeButton","StakeScreen"],"mappings":"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","file":"static/js/5.0679408e.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    const t = useTranslation();\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const t = useTranslation();\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={t(\"approve-\", { symbol: props.token?.symbol || \"\" })}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nconst ChangeNetwork = ({ chainId = 1 }) => {\n    const t = useTranslation();\n    const networkName = {\n        1: \"Mainnet\",\n        42: \"Kovan\"\n    }[chainId];\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Text light={true} style={{ textAlign: \"center\", marginVertical: Spacing.large }}>\n                {t(\"change-network-to\", { networkName })}\n            </Text>\n        </View>\n    );\n};\n\nexport default ChangeNetwork;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"fetching\")} disabled={true} />;\n};\nexport default FetchingButton;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"numeric\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isETH(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    danger?: boolean;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const t = useTranslation();\n    const { textMedium, textLight, placeholder, red } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : t(\"fetching\");\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text note={!IS_DESKTOP} fontWeight={\"bold\"} style={{ color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                note={!IS_DESKTOP}\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    color: props.danger ? red : props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import { useCallback } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nconst useSushiBar = () => {\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.enter(amount);\n        const tx = await sushiBar.enter(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.leave(amount);\n        const tx = await sushiBar.leave(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport default useSushiBar;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSushiBar from \"./useSushiBar\";\n\nexport type StakeAction = \"sushi-balance\" | \"stake\";\nexport type UnstakeAction = \"xsushi-balance\" | \"unstake\";\n\nexport interface StakingState {\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useStakingState: () => StakingState = () => {\n    const { signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n    const { enter, leave } = useSushiBar();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = useMemo(() => tokens.find(token => token.symbol === \"SUSHI\"), [tokens]);\n    const xSushi = useMemo(() => tokens.find(token => token.symbol === \"xSUSHI\"), [tokens]);\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && sushi && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, sushi.decimals);\n                const tx = await enter(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, sushi, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && xSushi && signer) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, xSushi.decimals);\n                const tx = await leave(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, xSushi, signer]);\n\n    return {\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useStakingState;\n","import React, { useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useStakingState, { StakingState } from \"../hooks/useStakingState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst StakeScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"stake\")} />\n                    <Text light={true}>{t(\"stake-desc\")}</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const { chainId } = useContext(EthersContext);\n    const t = useTranslation();\n    const state = useStakingState();\n    if (chainId !== 1) return <ChangeNetwork />;\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <SushiBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.sushi && state.sushi.balance.isZero() && (\n                <Notice text={t(\"you-dont-have-sushi\")} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <StakeInfo state={state} />\n        </View>\n    );\n};\n\nconst SushiBalance = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    return (\n        <View>\n            <Heading text={t(\"your-sushi\")} />\n            <AmountMeta\n                amount={state.sushi ? formatBalance(state.sushi.balance, state.sushi.decimals) : \"\"}\n                suffix={\"SUSHI\"}\n            />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    if (!state.sushi || state.sushi.balance.isZero()) {\n        return <Heading text={t(\"amount-to-stake\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={t(\"amount-to-stake\")} />\n            <TokenInput\n                token={state.sushi}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst StakeInfo = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    const disabled =\n        !state.sushi ||\n        state.sushi.balance.isZero() ||\n        !state.xSushi ||\n        !state.sushiStaked ||\n        !state.xSushiSupply ||\n        isEmptyValue(state.amount);\n    const xSushiAmount = disabled\n        ? undefined\n        : parseBalance(state.amount, state.sushi!.decimals)\n              .mul(state.xSushiSupply!)\n              .div(state.sushiStaked!);\n    const xSushiTotal = disabled ? undefined : formatBalance(state.xSushiSupply!, state.xSushi!.decimals, 8);\n    const xSushiBalance = disabled ? undefined : state.xSushi!.balance.add(xSushiAmount!);\n    const share = disabled\n        ? undefined\n        : Fraction.from(xSushiAmount!.add(xSushiBalance!), state.xSushiSupply!).toString();\n    return (\n        <InfoBox>\n            <AmountMeta\n                amount={xSushiAmount ? formatBalance(xSushiAmount, state.xSushi!.decimals, 8) : \"\"}\n                suffix={\"xSUSHI\"}\n                disabled={disabled}\n            />\n            <Meta label={t(\"xsushi-share\")} text={share} suffix={\"%\"} disabled={disabled} />\n            <Meta label={t(\"total-xsushi\")} text={xSushiTotal} disabled={disabled} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.sushi || state.sushi.balance.isZero() || isEmptyValue(state.amount) ? (\n                <StakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.sushi.decimals).gt(state.sushi.balance) ? (\n                <InsufficientBalanceButton symbol={state.sushi.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.sushi}\n                        spender={SUSHI_BAR}\n                        onSuccess={() => state.setSushiAllowed(true)}\n                        onError={setError}\n                        hidden={state.sushiAllowed}\n                    />\n                    <StakeButton state={state} onError={setError} disabled={!state.sushiAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst StakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onEnter();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={t(\"stake\")} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nexport default StakeScreen;\n"],"sourceRoot":""}
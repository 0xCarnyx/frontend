{"version":3,"sources":["src/components/AmountMeta.tsx","src/hooks/useDelayedOnBlockEffect.tsx","src/components/LPTokenSelect.tsx","src/hooks/useLPTokensState.tsx","src/hooks/useMasterChef.tsx","src/hooks/useFarmingState.tsx","src/screens/HarvestScreen.tsx"],"names":["AmountMeta","props","t","useTranslation","useColors","textDark","textLight","placeholder","style","fontSize","IS_DESKTOP","marginBottom","Spacing","normal","color","disabled","amount","suffix","useDelayedOnBlockEffect","effect","getEventName","inputs","initialTimeout","useContext","EthersContext","addOnBlockListener","removeOnBlockListener","eventName","useAsyncEffect","setTimeout","handles","forEach","handle","clearTimeout","LPTokenList","state","emptyText","Item","renderItem","useCallback","item","key","symbol","token","selected","onSelectToken","setSelectedLPToken","data","lpTokens","sort","p1","p2","m1","multiplier","m2","apy","loading","length","EmptyList","text","keyExtractor","margin","textAlign","width","LPTokenItem","textMedium","balance","formatBalance","decimals","onPress","containerStyle","ITEM_SEPARATOR_HEIGHT","alignItems","tokenA","small","replaceWETH","tokenB","marginLeft","medium","caption","tiny","flex","light","LPTokenSelect","title","expanded","selectedLPToken","onExpand","updatingLPTokens","useLPTokensState","mode","useTokenPairState","provider","address","tokens","useState","lastTimeRefreshed","setLastTimeRefreshed","setLoading","setLPTokens","selectedLPTokenAllowed","setSelectedLPTokenAllowed","pair","setPair","setAmount","getPair","useSDK","updateLPTokens","a","async","fetchMyPools","fetchPools","fetchMyLPTokens","useEffect","undefined","block","fromToken","toToken","updateLastTimeRefreshed","Date","now","useMasterChef","deposit","lpTokenId","signer","masterChef","getContract","MASTER_CHEF","estimateGas","gasLimit","mul","div","tx","logTransaction","toString","withdraw","useFarmingState","myPools","getTokenAllowance","depositing","setDepositing","withdrawing","setWithdrawing","setFromAmount","setToAmount","minAllowance","ethers","BigNumber","from","pow","sub","allowance","gte","totalSupply","amountDeposited","lpToken","convertToken","TokenAmount","lpTokenAmount","tokenAAmount","involvesToken","getLiquidityValue","toFixed","tokenBAmount","onDeposit","id","parseBalance","wait","onWithdraw","Harvest","chainId","marginTop","large","TokenItem","Withdraw","WithdrawInfo","marginRight","onAmountChanged","autoFocus","total","sushi","lte","pendingSushi","label1","label2","isEmptyValue","label","fromAmount","toAmount","WithdrawControls","error","setError","isZero","WithdrawButton","onError","gt","message","code","catch","HarvestScreen","Platform","OS"],"mappings":"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","file":"static/js/13.aeed6d39.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import { useContext } from \"react\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext, OnBlockListener } from \"../context/EthersContext\";\n\nconst useDelayedOnBlockEffect = (\n    effect: OnBlockListener,\n    getEventName: () => string,\n    inputs?: any[],\n    initialTimeout = 500\n) => {\n    const { addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const eventName = getEventName();\n    useAsyncEffect<number[]>(\n        () => {\n            return [\n                setTimeout(effect, initialTimeout),\n                setTimeout(() => addOnBlockListener(eventName, effect), initialTimeout)\n            ];\n        },\n        handles => {\n            if (handles) {\n                handles.forEach(handle => clearTimeout(handle));\n                removeOnBlockListener(eventName);\n            }\n        },\n        inputs\n    );\n};\n\nexport default useDelayedOnBlockEffect;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance } from \"../utils\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n    disabled?: boolean;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <props.Item\n                    token={props.state.selectedLPToken}\n                    selected={true}\n                    onSelectToken={props.disabled ? () => {} : onUnselectToken}\n                />\n            )}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return <Item key={item.symbol} token={item} selected={false} onSelectToken={state.setSelectedLPToken} />;\n        },\n        [state.setSelectedLPToken]\n    );\n    const data = state.lpTokens.sort((p1, p2) => {\n        const m1 = p1.multiplier || 0;\n        const m2 = p2.multiplier || 0;\n        return m1 === m2 ? (p2.apy || 0) - (p1.apy || 0) : m2 - m1;\n    });\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => item.symbol} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 6);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyPools, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LPTokensState extends TokenPairState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    pair?: Pair;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\nlet updatingLPTokens = false;\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useTokenPairState();\n    const { provider, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [amount, setAmount] = useState(\"\");\n    const { getPair } = useSDK();\n\n    const updateLPTokens = async () => {\n        if (address && provider && tokens.length > 0 && !updatingLPTokens) {\n            try {\n                updatingLPTokens = true;\n                const data = await (mode === \"my-pools\"\n                    ? fetchMyPools(address, tokens, provider)\n                    : mode === \"pools\"\n                    ? fetchPools(address, tokens, provider)\n                    : fetchMyLPTokens(address, tokens, provider));\n                if (data) {\n                    setLPTokens(data);\n                }\n            } finally {\n                updatingLPTokens = false;\n                setLoading(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        setLoading(true);\n        setPair(undefined);\n        if (selectedLPToken && provider) {\n            try {\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\n            } catch (e) {\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setLoading(false);\n        }\n    }, [selectedLPToken, provider]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\n        toToken: state.toToken || selectedLPToken?.tokenB,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        pair,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import { useCallback } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nconst useMasterChef = () => {\n    const deposit = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\n        const tx = await masterChef.deposit(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.deposit()\", lpTokenId, amount.toString());\n    }, []);\n\n    const withdraw = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\n        const tx = await masterChef.withdraw(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.withdraw()\", lpTokenId, amount.toString());\n    }, []);\n\n    return {\n        deposit,\n        withdraw\n    };\n};\n\nexport default useMasterChef;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { TokenAmount } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { convertToken, parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useMasterChef from \"./useMasterChef\";\n\nexport interface FarmingState extends LPTokensState {\n    onDeposit: () => Promise<void>;\n    depositing: boolean;\n    onWithdraw: () => Promise<void>;\n    withdrawing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useFarmingState: (myPools: boolean) => FarmingState = myPools => {\n    const state = useLPTokensState(myPools ? \"my-pools\" : \"pools\");\n    const { signer, getTokenAllowance } = useContext(EthersContext);\n    const { deposit, withdraw } = useMasterChef();\n    const [loading, setLoading] = useState(false);\n    const [depositing, setDepositing] = useState(false);\n    const [withdrawing, setWithdrawing] = useState(false);\n\n    useEffect(() => {\n        setLoading(false);\n        setDepositing(false);\n        setWithdrawing(false);\n        state.setFromAmount(\"\");\n        state.setToAmount(\"\");\n    }, [state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useAsyncEffect(() => {\n        if (\n            state.pair &&\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.selectedLPToken.amountDeposited\n        ) {\n            const lpToken = convertToken(state.selectedLPToken);\n            const tokenA = convertToken(state.selectedLPToken.tokenA);\n            const tokenB = convertToken(state.selectedLPToken.tokenB);\n            const totalSupply = new TokenAmount(lpToken, state.selectedLPToken.totalSupply.toString());\n            const lpTokenAmount = new TokenAmount(lpToken, state.selectedLPToken.amountDeposited.toString());\n            const tokenAAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenA, totalSupply, lpTokenAmount)\n                : null;\n            state.setFromAmount(tokenAAmount?.toFixed() || \"\");\n            const tokenBAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenB, totalSupply, lpTokenAmount)\n                : null;\n            state.setToAmount(tokenBAmount?.toFixed() || \"\");\n        }\n    }, [state.pair, state.selectedLPToken]);\n\n    const onDeposit = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setDepositing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await deposit(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setDepositing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    const onWithdraw = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setWithdrawing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await withdraw(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onDeposit,\n        depositing,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nexport default useFarmingState;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport AmountMeta from \"../components/AmountMeta\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Selectable from \"../components/Selectable\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { FarmingSubMenu } from \"../components/web/WebSubMenu\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useFarmingState, { FarmingState } from \"../hooks/useFarmingState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst HarvestScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"harvest-sushi\")} />\n                    <Text light={true}>{t(\"harvest-sushi-desc\")}</Text>\n                    <Harvest />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <FarmingSubMenu />\n        </Screen>\n    );\n};\n\nconst Harvest = () => {\n    const { chainId } = useContext(EthersContext);\n    const t = useTranslation();\n    const state = useFarmingState(true);\n    if (chainId !== 1) return <ChangeNetwork />;\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect\n                state={state}\n                title={\"My Farms\"}\n                emptyText={t(\"you-dont-have-lp-tokens-deposited\")}\n                Item={TokenItem}\n            />\n            <Border />\n            <Withdraw state={state} />\n            <WithdrawInfo state={state} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const amount = formatBalance(props.token?.amountDeposited || 0, props.token.decimals, 8);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <Text caption={IS_DESKTOP} medium={true} style={{ flex: 1, textAlign: \"right\", marginRight: 4 }}>\n                    {amount}\n                </Text>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nconst Withdraw = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    if (!state.selectedLPToken) {\n        return <Heading text={t(\"amount\")} disabled={true} />;\n    }\n    // This enables MAX button\n    const token = {\n        ...state.selectedLPToken,\n        balance: state.selectedLPToken.amountDeposited\n    } as Token;\n    return (\n        <View>\n            <Heading text={state.selectedLPToken.symbol + \" \" + t(\"amount\")} />\n            <TokenInput token={token} amount={state.amount} onAmountChanged={state.setAmount} autoFocus={IS_DESKTOP} />\n        </View>\n    );\n};\n\nconst WithdrawInfo = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    const amount = parseBalance(state.amount);\n    const total = state.selectedLPToken?.amountDeposited;\n    const sushi = total && amount.lte(total) ? state.selectedLPToken!.pendingSushi?.mul(amount).div(total) : null;\n    const disabled = !state.pair || !state.selectedLPToken;\n    const label1 = state.selectedLPToken\n        ? t(\"deposited-\", { symbol: state.selectedLPToken.tokenA.symbol })\n        : t(\"deposited-token-1\");\n    const label2 = state.selectedLPToken\n        ? t(\"deposited-\", { symbol: state.selectedLPToken.tokenB.symbol })\n        : t(\"deposited-token-2\");\n    return (\n        <InfoBox>\n            <AmountMeta\n                amount={sushi ? formatBalance(sushi) : \"\"}\n                suffix={\"SUSHI\"}\n                disabled={disabled || isEmptyValue(state.amount)}\n            />\n            <Meta label={t(\"deposited-lp-token\")} text={total ? formatBalance(total) : \"\"} disabled={disabled} />\n            <Meta label={label1} text={state.fromAmount} disabled={disabled} />\n            <Meta label={label2} text={state.toAmount} disabled={disabled} />\n            <WithdrawControls state={state} />\n        </InfoBox>\n    );\n};\n\nconst WithdrawControls = ({ state }: { state: FarmingState }) => {\n    const t = useTranslation();\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    const disabled = isEmptyValue(state.amount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || state.selectedLPToken.amountDeposited?.isZero() ? (\n                <WithdrawButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken!.decimals).gt(\n                  state.selectedLPToken!.amountDeposited!\n              ) ? (\n                <Button title={t(\"insufficient-amount\")} disabled={true} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <WithdrawButton state={state} onError={setError} disabled={disabled} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst WithdrawButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = useCallback(() => {\n        onError({});\n        state.onWithdraw().catch(onError);\n    }, [state.onWithdraw, onError]);\n    return <Button title={t(\"withdraw\")} disabled={disabled} loading={state.withdrawing} onPress={onPress} />;\n};\n\nexport default HarvestScreen;\n"],"sourceRoot":""}